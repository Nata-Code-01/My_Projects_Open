#Задание 1. Создайте массив NumPy с элементами от числа N до 0. Число N должно вводиться с клавиатуры.

N = int(input("Введите число N: "))                                             # Вводим число N с клавиатуры.

if N >= 0:                                                                      # Случай неотрицательности введённого числа.
  print("Массив NumPy с элементами от числа N до 0: \n", np.arange(N, -1, -1))
else:                                                                           # Случай отрицательности введённого числа.
  print("Массив NumPy с элементами от числа N до 0: \n", np.arange(N, 1, 1))

#Задание 2. Создайте диагональную матрицу с элементами от N до 0. Вычислите сумму ее диагональных элементов. Число N должно вводиться с клавиатуры.

N = int(input("Введите число N: "))                                             # Вводим число N с клавиатуры.

if N >= 0:                                                                      # Случай неотрицательности введённого числа.
  M_diag = np.diag(np.arange(N, -1, -1), k=0)
else:                                                                           # Случай отрицательности введённого числа.
  M_diag = np.diag(np.arange(N, 1, 1), k=0)

print("Полученная диагональная матрица имеет вид:\n", M_diag)                   # Построили диагональную матрицу по заданному массиву.

print("Вытащили диагональ из полученной матрицы, она имеет вид: \n", np.diag(M_diag))

print("Сумма диагональных элементов матрицы:", sum(np.diag(M_diag)))            # Подсчёт суммы диагональных элементов матрицы.

#Задание 3. Решите систему уравнений:
'''
4x + 2y + z = 4

x + 3y = 12

5y + 4z = -3
'''

from numpy import linalg

A = np.array([[4, 2, 1], [1, 3, 0], [0, 5, 4]])                                 # Левая часть СЛАУ.
print("Левая часть СЛАУ имеет вид: \n", A)

f = np.array([4, 12, -3])                                                       # Вектор правой части СЛАУ.
print("Правая часть СЛАУ имеет вид: \n", f)

solve = linalg.solve(A, f)                                                      # Поиск решения.
print("Полученное решение имеет вид: \n", solve)

# Проверка.
print(np.allclose(np.dot(A, solve), f))
