# Задание 1. Напишите функцию sum_fib(n), которая возвращает сумму n чисел Фибоначчи (https://ru.wikipedia.org/wiki/Числа_Фибоначчи). [Проверьте её работу для разных значений n с помощью MS Exсel].

def fibonacci(n):                                                               # Функция, формирующая числа Фибоначчи.
    global calls
    calls +=1
    if n <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)

def sum_fib(n):                                                                 # Функция, считающая сумму первых n чисел Фибоначчи.
  sum = 0
  for i in range(n):
    sum += fibonacci(i)
  return (sum)


for n in range(8,14):                                                           # Выведим сумму чисел Фибоначчи для разных значений n.
    print(f'Сумма первых {n} чисел Фибоначчи:', sum_fib(n))

#Задание 2. Напишите нерекурсивную функцию, которая возвращает факториал числа n. [ Проверьте её работу для разных значений n с помощью MS Exсel ].

def factorial(n):                                                               # Нерекурсивная функция вычисления факториала.
  if n < 0:
    print("Ошибка! Факториал отрицательного числа не поределён.")
  elif n ==0:
    return(0)
  else:
    s = 1
    for i in range(1, n + 1):
      s *= i
    return(s)

for i in range(3, 9):                                                           # Выведим факториалы чисел от 3 до 8.
  print(f"Факториал числа {i}:", factorial(i))

#Задание 3. Дана статистика рекламных кампаний по дням. Напишите алгоритм, который по паре дата-кампания ищет значение числового столбца. Например, для даты '2018-01-01' и 'google' нужно получить число 25. Все комбинации дата-кампания уникальны.
'''
'2018-01-01', 'google', 25
'2018-01-01', 'yandex', 65
'2018-01-01', 'market', 89
'2018-01-02', 'google', 574
'2018-01-02', 'yandex', 249
'2018-01-02', 'market', 994
'2018-01-03', 'google', 1843
'2018-01-03', 'yandex', 1327
'2018-01-03', 'market', 1764
'''

def find(d, c, data):                                                           # Функция поиска числа по паре дата-кампания.
  for s in data:
    if s[0] == d and s[1] == c:
      return s[2]

# Рассмотрим пример применения функции:

list = [('2018-01-01', 'google', 25),                                           # Задаём лист с исзодными данными.
    ('2018-01-01', 'yandex', 65),
    ('2018-01-01', 'market', 89),
    ('2018-01-02', 'google', 574),
    ('2018-01-02', 'yandex', 249),
    ('2018-01-02', 'market', 994),
    ('2018-01-03', 'google', 1843),
    ('2018-01-03', 'yandex', 1327),
    ('2018-01-03', 'market', 1764),]


d = '2018-01-01'                                                                # Задаём дату для поиска.
c = 'google'                                                                    # Задаём кампанию для поиска.
res = find(d, c, list)                                                          # Применяем функцию для поиска.

print(f"Значение для {d} и {c} имеет вид: {res}")                               # Выводим результат.

#Задание 4. Дана статистика рекламных каналов по объемам продаж. Напишите программу (пользовательские функции использовать необязательно), которая возвращает название канала с максимальным объемом. Например, для приведённых ниже данных, программа должна возвращать 'facebook'.
#Рекомендуем, данные о продажах оформить в виде словаря. 'facebook': 155, 'yandex': 120, 'vk': 115, 'google': 99, 'email': 42, 'ok': 98

def find_max(s):                                                                # Функция поиска канала с максимальными продажами.
    m_s = 0                                                                     # Инициализируем нулевым значением переменную продаж.
    for i, j in s.items():
        if j > m_s:                                                             # Если есть продажа больше, сохраняем кампанию.
            m_s = j
            m = i
    if m != None:
      return m
    else:
      print("Ошибка входных данных!")

# Рассмотрим пример применения функции:

data = {'facebook': 155,'yandex': 120,'vk': 115,'google': 99,'email': 42,'ok': 98}

max = find_max(data)                                                            # Находим канал с максимальными продажами.

print(f"Канал с максимальным объемом продаж это: {max}")

#Задание 5. Узнать, сколько раз слово "питон" встречается в тексте: "язык питон хвост рога питон удав змея горилла человек питон змея шкура питон зубы голова заяц питон саламандра" (пробелов между словами может быть несколько).

s = "язык питон хвост рога питон удав  змея горилла человек питон змея шкура   питон зубы голова заяц питон  саламандра" # Зададим исходный текст как строку.
w = "питон"                                                                     # Зададим искомое слово как строку.
print("Исходный текст имеет вид:", s, '\n')

k = 0                                                                           # Счётчик, который будет отвечать за количество вхождений слова w в текст.
s_list = s.split()                                                              # Разбиваем по пробелам исходную строку.

print("Разбитый текст имеет вид списка:", s_list, '\n')

for i in s_list:                                                                # В цикле проверяем вхождения слова в текст.
  if i == w:
    k += 1

print(f"Слово '{w}' встретилось в тексте {k} раз.")                             # Выводим на экран результат.
