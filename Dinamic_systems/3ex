'''
Решить систему нелинейных уравнений методом продолжения по параметру:
$$ \left\{ \begin{aligned} &4x^3 + 4xy - 42x + 2y^2 - 14 = 0, \\  &2x^2 + 4xy + 4y^3 - 26y - 22 = 0. \\ \end{aligned} \right.$$
'''

import sympy as sp
import numpy as np
from scipy.integrate import odeint
import matplotlib.pyplot as plt
import random

x, y = sp.symbols('x y')                                                             # Определяем символы.

M = sp.Matrix(( [12*x**2 + 4*y - 42, 4*x + 4*y], [4*x + 4*y, 4*x + 12*y**2 - 26]))   # Задаём матрицу.

M_inv = M.inv()                                                                      # Вычисляем обратную матрицу.

print("Исходная матрица:")
M

print("Обратная к ней матрица:")
M_inv

sp.simplify(M*M_inv)

det_M = M.det()                                                                      # Вычисляем определитель матрицы M.

print("Определитель исходной матрицы:")
det_M

def Runge_kutta_sys(f, x0, xn, y0, n):          # Функция, реализующая метод Рунге-Кутта 4-го порядка для системы ОДУ k-го порядка.
    m = len(y0)                                 # Определяем количество уравнений.
    y = np.zeros((n, m))                        # Массив решений.
    y[0] = y0                                   # Начальные условия.
    x = np.linspace(x0, xn, n)                  # Разбиение отрезка.  
    h = x[1] - x[0]                             # Шаг разбиения.

    for i in range(n - 1):                      # Реализация метода.
        k1 = f(x[i], y[i])
        k2 = f(x[i] + h/2, y[i] + h/2 * k1)
        k3 = f(x[i] + h/2, y[i] + h/2 * k2)
        k4 = f(x[i] + h, y[i] + h * k3)
        K = (k1 + 2*k2 + 2*k3 + k4)/6
        y[i + 1] = y[i] + h * K
    return x, y

    def f(tau, z):                                  # Правая часть системы уравнений (возвращает  многомерный массив).
    x, y = z
    J = sp.Matrix([[12*x**2 + 4*y - 42, 4*x + 4*y], [4*x + 4*y, 4*x + 12*y**2 - 26]])      # Якобиан.
    B = sp.Matrix([b[0], b[1]])                                                            # Вектор b для текущей начальной точки.
    J_inv = J.inv()                                                                        # Нахождение обратной матрицы.
    res = -J_inv @ B
    return np.array([res[0], res[1]]).astype(float)

    def sign_det(J_det, X, Y):                      # Функция, проверяющая изменение знака определителя Якобиана в процессе поиска решения.
    x, y = sp.symbols('x y')
    s = np.sign(J_det.subs({x: X[0], y: Y[0]}))
    for i in range(1, len(X)):
        s_i = np.sign(J_det.subs({x: X[i], y: Y[i]}))
        if (np.sign(J_det.subs({x: X[i], y: Y[i]}))) != s:
            return (False)
        s = s_i
    return (True)

    N = 100                                         # Количество начальных точек.

y0 = np.zeros((N, 2))                           # Массив, хранящий N наборов начальных точек.
for i in range(N):                              # Генерация случайных вещественных начальных приближений от -5 до 5.
    x = -5 + 10*random.random()
    y = -5 + 10*random.random()
    y0[i] = [x, y]
    
#print("Вектор начальных приближений (x0, y0):\n", y0)

t0 = 0                                          # Определим левый конец отрезка по параметру.
tn = 1                                          # Определим правый конец отрезка по параметру.
n = 51                                          # Количество итераций.

t = np.linspace(t0, tn, n)

f1 = lambda x, y: 4*x**3 + 4*x*y - 42*x + 2*y**2 - 14   # Левая часть первого уравнения системы.
f2 = lambda x, y: 2*x**2 + 4*x*y + 4*y**3 -26*y - 22    # Левая часть второго уравнения системы.

x, y = sp.symbols('x, y')
J = sp.Matrix([[12*x**2 + 4*y - 42, 4*x + 4*y], [4*x + 4*y, 4*x + 12*y**2 - 26]])      # Якобиан.
J_det = J.det()                                                                        # Определитель якобиана.

SOL = []                                                                               # Список для хранения решений.

# Построение в цикле функций продолжения и поиск решений системы:

for i in range(N):
    b1 = f1(y0[i][0], y0[i][1])
    b2 = f2(y0[i][0], y0[i][1])

    b = [b1, b2]
    
    # print(f"Вектор b для {i+1} случая:\n", b)

    x, sol = Runge_kutta_sys(f, t0, tn, y0[i], n)                                      # Решение системы ОДУ методом Рунге-Кутта.

    # Останавливаем процесс, если определитель Якобиана поменял знак при поиске решения.
    if(sign_det(J_det, sol[:, 0], sol[:, 1]) != True):
        continue

    # plt.plot(x, sol[:, 0], 'g--', lw=2, label='Функция x')
    # plt.plot(x, sol[:, 1], 'r--', lw=2, label='Функция y')

    # plt.grid()
    # plt.title(f"Сравнение результатов на {i + 1} шаге.")
    # plt.legend(loc='best')
    # plt.show()

    # Отсекаем решения, которые при подстановке и округлении до 3 знака дают плохие результаты.
    if (abs(round(f1(sol[:, 0][n - 1], sol[:, 1][n - 1]), 3)) > abs(0)) or (abs(round(f2(sol[:, 0][n - 1], sol[:, 1][n - 1]), 3)) > abs(0)):
        continue
        
    solution = [round(sol[:, 0][n - 1], 3), round(sol[:, 1][n - 1], 3)] # Решение на i-ом шаге.
    
    if solution not in SOL:           # Проверка на уникальность (не было ли найдено уже таких решений на прошлых шагах).
        SOL.append(solution)

print("Вектор решений:", SOL)
for i in range(len(SOL)):
    print(f'Решение {i + 1}: ({SOL[i]})')
    print("Проверка:")
    print("Первое уравнение при подставновке:", round(f1(SOL[i][0], SOL[i][1])))
    print("Второе уравнение при подставновке:", round(f2(SOL[i][0], SOL[i][1])))
