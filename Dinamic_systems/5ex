'''
Промоделировать и исследовать бифуркации и определить устойчивость решений системы Валлиса:

$$ \left\{ \begin{aligned} &\dot{x} = \mu y - ax, \\  &\dot{y} = xz - y, \\  &\dot{z} = 1 -xy - z. \\ \end{aligned} \right.$$

Определить существование аттракторов в этой системе и исследовать их тип в зависимости от параметров. Построить зависимость показателей Ляпунова от параметров. Построить отображение Пуанкаре.
'''

import numpy as np
import matplotlib.pyplot as plt
from scipy.integrate import solve_ivp

def w_sys(t, xyz, mu, a):                                                 # Функция, определяющая систему Валлиса.
    x, y, z = xyz
    dxdt = mu * y - a * x
    dydt = x * z - y
    dzdt = 1 - x * y - z
    return [dxdt, dydt, dzdt]

    def picture2d(mu, a, x0, t_span):                                           # Функция, визуализирующая систему Валлиса на плоскости.
    
    sol = solve_ivp(w_sys, t_span, x0, args=(mu, a), dense_output=True)   # Решение системы уравнений.

    t = np.linspace(t_span[0], t_span[1], 1000)
    x, y, z = sol.sol(t)

    plt.figure()
    plt.subplot(3, 1, 1)
    plt.plot(t, x, label='x(t)', color='r')
    plt.title(f'Динамика системы для mu={mu}, a={a}')
    plt.ylabel('x(t)')
    plt.xlabel('t')
    plt.grid()

    plt.subplot(3, 1, 2)
    plt.plot(t, y, label='y(t)', color='g')
    plt.ylabel('y(t)')
    plt.xlabel('t')
    plt.grid()

    plt.subplot(3, 1, 3)
    plt.plot(t, z, label='z(t)', color='b')
    plt.ylabel('z(t)')
    plt.xlabel('t')
    plt.grid()

    plt.tight_layout()
    plt.show()

    a = 3.0                                             # Значение параметра a.
x0 = [0.1, 0.1, 0.1]                                # Начальные условия.
t_span = (0, 30)                                    # Интервал времени.

Mu = np.linspace(0.1, 20, 5)                        # Различные значения параметра mu.
for mu in Mu:
    picture2d(mu, a, x0, t_span)

    def picture3d(mu, a, x0, t_span):                                   # Функция, визуализирующая систему Валлиса в пространстве.

    sol = solve_ivp(w_sys, t_span, x0, args=(mu, a), dense_output=True)    # Решение системы.
    
    t = np.linspace(t_span[0], t_span[1], 1000)
    x, y, z = sol.sol(t)

    plt.figure()
    ax = plt.axes(projection='3d')
    ax.plot3D(x, y, z, 'b-')
    ax.set_title(f'Фазовый портрет в пространстве при mu={mu}, a={a}')
    ax.set_xlabel('x(t)')
    ax.set_ylabel('y(t)')
    ax.set_zlabel('z(t)')
    plt.show()
