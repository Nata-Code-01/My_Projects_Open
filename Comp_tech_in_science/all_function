import numpy as np
#----------------------------------------------------------------------СЛАУ-------------------------------------------------------------------------------------
#_________________________________________________________________Определитель матрицы__________________________________________________________________________

def Det(A):                                                       # Функция, считающая определитель матрицы A.
    
    if(len(A) != len(A[:, 0])):
       print("Матрица не квадратная!")
       exit
    pow = 1                                                       # Вспомогательная переменная, для определения кол-ва перестановок строк.
    
    for j in range(N - 1):
        max, k = max_el (A[j:, j])                                # Нахождение максимального по стобцу элемента.
        if(j != k):
            swap_rows(A, j, k)                                    # Меняем местами строки j и k.
            pow = - np.sign(pow)                                  # Находим итоговый знак определителя.
        for i in range(j + 1, N):
            coef = - A[i][j] / A[j][j]                            # Коэффициент для умножения первой строки.  
            A[i] = A[i] + coef* A[j]                              # Обнуляем первый столбец.
    
    det = pow * A[N-1][N-1]                                       # Находим определитель треугольной матрицы.
    for i in range(N - 1):
        det = det * A[i][i]
    
    if(abs(det) == 0):                                            # Исключаем знак "-" в случае, если определитель равен 0.
        det = 0
    print(A)
    return det

#_________________________________________________________________Методы прогонки_______________________________________________________________________________

def Thomas_diag(a, b, c, d):                                      # Функция, реализующая метод прогонки (принимает диагонали + вектор првой части).
    n = len(b)
    x = np.zeros(n)
    y = np.zeros(n)
    alpha = np.zeros(n)
    beta = np.zeros(n)
    y[0] = b[0]
    alpha [0] = -c[0]/y[0]
    beta [0] = d[0]/y[0]
    for i in range(1, n-1):
        y[i] = b[i] + a[i-1] * alpha[i - 1]
        alpha[i] = -c[i] / y[i]
        beta[i] = (d[i] - a[i-1]*beta[i-1]) / y[i]
    y[n-1] = b[n-1] + a[n-2] * alpha[n-2]
    beta [n-1] = (d[n-1] - a[n-2] * beta[n-2]) / y[n-1]

    x[n-1] = beta[n-1]
    for i in range(n - 2, -1, -1):
        x[i] = alpha[i] * x[i+1] + beta[i]
    return(x)


def Thomas_matrix(A, F):                                          # Функция, реализующая метод прогонки (принимает матрицу левой части + вектор правой части).
    n = len(A)
    x = np.zeros(n)
    y = np.zeros(n)
    alpha = np.zeros(n)
    beta = np.zeros(n)
    y[0] = A[0][0]
    alpha [0] = -A[0][1]/y[0]
    beta [0] = F[0]/y[0]
    for i in range(1, n-1):
        y[i] = A[i][i] + A[i][i-1] * alpha[i - 1]
        alpha[i] = -A[i][i+1] / y[i]
        beta[i] = (F[i] - A[i][i-1]*beta[i-1]) / y[i]
    y[n-1] = A[n-1][n-1] + A[n-1][n-2] * alpha[n-2]
    beta [n-1] = (F[n-1] - A[n-1][n-2] * beta[n-2]) / y[n-1]

    x[n-1] = beta[n-1]
    for i in range(n - 2, -1, -1):
        x[i] = alpha[i] * x[i+1] + beta[i]
    return(x)


def progonka_period(A_big, F):                                    # Функция, реализующая преобразованный метод прогонки.
    
    n = len(A_big)                                                # Размерность исходной матрицы.
    
    A_small = A_big[:-1, :-1]                                     # Получаем матрицу A_n-1.

    u = A_big[:-1, n - 1]                                         # Получаем вектор u_n-1.

    v = A_big[n - 1, :-1]                                         # Получаем вектор v_n-1.

    f = F[:-1]                                                    # Получаем вектор f_n-1.

    p = Thomas_matrix(A_small, f)                                 # Методом прогонки определяем вектор p_n-1.

    q = Thomas_matrix(A_small, u)                                 # Методом прогонки определяем вектор q_n-1.

    yn = (np.dot(v, p) - F[-1] )/(np.dot(v, q) - A_big[n - 1][n - 1]) # Находим последний элемент вектора решения.

    y = np.zeros(n)                                               # Задаём вектор решения.
    y[:-1] = p - yn*q                                             # Определяем вектор решения.
    y[-1] = yn                                                    # Добавляем последний элемент вектора решения.
    
    return y

#_________________________________________________________________Метод Гаусса(без выбора ведущего элемента)____________________________________________________

def Gauss(A, b):
    
    # Прямой ход.
    
    Ab = np.hstack((A, b))                                        # Получаем расширенную матрицу.
    n = len(b)                                                    # Количество строк любого размера.
    res = np.zeros(n)                                             # Массив для хранения решения СЛАУ.
    for j in range(n - 1):
        for i in range(j + 1, n):
            if Ab[i][j] == 0:
                print("Error")
            else:
                coef = - Ab[i][j] / Ab[j][j]                      # Коэффициент для умножения первой строки.  
            Ab[i] = Ab[i] + coef* Ab[j]                           # Обнуляем первый столбец.
            
    # Обратный ход.
    
    print(Ab)
    for i in range(n - 1, -1, -1):
        res[i] = (Ab[i][-1] - np.dot(res[i + 1 :], Ab[i][i + 1 : -1])) / Ab[i][i]
    return res

#_________________________________________________________________Метод Гаусса(с выбором ведущего элемента)____________________________________________________

def max_el(A):                                                    # Функция, принимающая столбец матрицы и возвращающая максимальный элемент этого столбца и 
                                                                  # его номер строки в матрице.
    n = len(A)
    k = 0                                                         # Индекс элемента в столбце, присваиваем сначала 0.
    max = A[0]                                                    # Присваиваем максимальному значению первый элемент столбца.
    for i in range(n):
        if (abs(A[i])  > abs(max)):                               # Сравниваем элементы по модулю.
            max = A[i]
            k = i
    # print("Максимальный элемент =", max, ", находится в строчке", k + (N - n) + 1, ".")
    return (max, k + (N - n))

def swap_rows(A, i, j):                                           # Функция, меняющая местами строки i и j матрицы A.
    tmp = A[i].copy()
    A[i] = A[j]
    A[j] = tmp
    
def Gauss_VED(A, b):                                              # Функция, реализующая метод Гаусса с выбором ведущего (главного) элемента по столбцу.
    
    # Прямой ход.
    
    Ab = np.hstack((A, b))                                        # Получаем расширенную матрицу.
    res = np.zeros(N)                                             # Массив для хранения решения СЛАУ.
    print("Расширенная матрица:", '\n', Ab)
    for j in range(N - 1):
        max, k = max_el (Ab[j:, j])                               # Нахождение максимального по столбцу элемента.
        if (j != k):
            swap_rows(Ab, j, k)                                   # Меняем местами строки j и k.
            print("Поменяли строки", j + 1, "и", k + 1, "местами:", '\n', Ab)
        for i in range(j + 1, N):
            coef = - Ab[i][j] / Ab[j][j]                          # Коэффициент для умножения первой строки.  
            Ab[i] = Ab[i] + coef* Ab[j]                           # Обнуляем первый столбец.
            print("Обнулили ", i + 1, " элемент в столбце ", j + 1, ':\n', Ab)
    
    # Обратный ход.
    
    for i in range(N - 1, -1, -1):
        res[i] = (Ab[i][-1] - np.dot(res[i + 1 :], Ab[i][i + 1 : -1])) / Ab[i][i]
    return res

#_________________________________________________________________Метод LU - разложения_________________________________________________________________________

def Gauss_LU(A, b):                                               # Функция, реализующая решение СЛАУ методом LU - разложения.

    # Прямой ход
    
    x = np.zeros(N)                                               # Массив для хранения решения СЛАУ.
    y = np.zeros(N)                                               # Массив для хранения вектора при решении Ly = b.
    U = A.copy()                                                  # Присваиваем элементам матрицы U элементы матрицы A. 
    L = np.eye(N)                                                 # Создаем первоначальную матрицу L, равную единичной.

    for j in range(N - 1):
        for i in range(j + 1, N):
            coef = -U[i][j] / U[j][j]                             # Коэффициент для умножения строки.
            L[i][j] = - coef                                      # Заполняем L.
            U[i] = U[i] + coef * U[j]                             # Обнуляем j-ый столбец в матрице U.

    print("Матрица L имеет вид:\n", L)
    print("Матрица U имеет вид:\n", U)
    print("Произведение LU равняется:\n", np.dot(L, U))
    
    # Обратный ход.
    
    Lb = np.hstack((L, b))                                        # Получаем расширенную матрицу Lb.
    for i in range(0, N, 1):                                      # Решаем систему типа: Ly = b (находим вектор y).
        y[i] = (Lb[i][-1] - np.dot(y[: i], Lb[i][0 : i ])) / Lb[i][i]
    y.shape = 1, -1                                               # Добавляем к вектору y еще одну ось, чтобы его транспонировать.
    
    Uy = np.hstack((U, y.T))                                      # Получаем расширенную матрицу Uy.
    
    for i in range(N - 1, -1, -1):                                # Решаем систему типа: Ux = y (находим решение x).
        x[i] = (Uy[i][-1] - np.dot(x[i + 1 :], Uy[i][i + 1 : -1])) / Uy[i][i]
    return x

#_________________________________________________________________Метод PLU - разложения________________________________________________________________________

def PLU(A):                                                       # Функция, осуществляющая PLU - разложение.
    
    N = A.shape[0]                                                # Определяем размерность матрицы A.
    U = A.copy()                                                  # Присваиваем элементам матрицы U элементы матрицы A. 
    L = np.zeros((N))                                             # Создаем первоначальную матрицу L, равную единичной.
    P = np.eye(N)                                                 # Создаем матрицу перестановок P, равную единичной.

    # Прямой ход с перестановками:
    
    for j in range(N):
        k = max_el (U[j:, j])                                     # Нахождение максимального по столбцу j элемента.
        if k != j:
            swap_rows(U, j, k)                                    # Меняем местами строки в матрице U.      
            swap_rows(P, j, k)                                    # Меняем местами строки в матрице P.
            swap_rows(L, j, k)
            # swap_rows(L[:, :j], j, k)                           # Меняем местами строки в матрице L.
    
        for i in range(j + 1, N):
            coef = -U[i][j] / U[j][j]                             # Коэффициент для умножения строки.
            L[i][j] = -coef                                       # Заполняем L.
            U[i] = U[i] + coef * U[j]                             # Обнуляем j-ый столбец.
    return P, L, U


#----------------------------------------------------------------------Нахождение корня уравнения---------------------------------------------------------------

#_________________________________________________________________Метод половинного деления_____________________________________________________________________

def bisection(f, a, b, e):                                        # Фунция, реализующая метод половинного деления.
    while b - a >= e:
        x = (a + b) * 0.5
        if f(x) == 0:
            break
        else:
            if (f(a) * f(x) > 0):
                a = x
            else:
                b = x
    return(x)

#_________________________________________________________________Метод простой итерации________________________________________________________________________

def my_norm(x):                                                   # Функция, определяющая норму вектора.
    n = len(x)                                                    # Размерность вектора.
    res = 0.
    for i in range(n):
        if (abs(x[i]) > res):
            res = abs(x[i])
    return res
    
def SimpleIter(A, b, x0, eps, S):                                 # Функция, реализующая метод простой итерации СЛАУ.
    x1 = m @ N @ x0 + m @ b
    k = 0
    while (my_norm(x1 - x0) > eps) and (k < S):
        x0 = x1
        x1 = m @ N @ x0 + m @ b
        k += 1
        print(x0,x1)
    print(k)
    return (x1)

#________________________________________________________________________Метод Ньютона__________________________________________________________________________

def newton(eq, a, b, eps, N):
    '''
        eq - какое уравнение решаем;
        a - левый конец отрезка;
        b - правый конец отрезка;
        eps - условие останова;
        N - максимальное количество итераций.  
    '''
    x = sm.symbols('x')
    f = sm.lambdify(x, equation, 'numpy')                         # Определяем функцию f, в которую можно подставлять значения.
    df = sm.lambdify(x, equation.diff(x), 'numpy')                # Определяем первую производную функции f.
    df2 = sm.lambdify(x, equation.diff(x, 2), 'numpy')            # Определяем вторую производную функции f.

    #Определяем начальное приближение:
    
    if (df2(a) * f(a) > 0):
        x0 = a
    elif (df2(b) * f(b) > 0):
        x0 = b
    else:
        exit("Ошибка!") 
        
    xn = x0 - f(x0) / df(x0)
    while (abs(xn - x0) >= eps):
        x0 = xn - f(xn) / df(xn)
        xn = x0 - f(x0) / df(x0)
    return xn


#----------------------------------------------------------------------Численное интегрирование-----------------------------------------------------------------
#_________________________________________________________________Метод левых прямоугольников___________________________________________________________________

def pr_left(f, a , b):                                           # Функция, реализующая метод левых прямоугольников.
    n = 10
    x = np.linspace (a, b , n + 1)
    h = (b - a)/n
    I = h * sum(f(x)[:-1])
    return I

#_________________________________________________________________Метод правых прямоугольников__________________________________________________________________

def pr_right(f, a , b):                                          # Функция, реализующая метод правых прямоугольников.
    n = 10
    x = np.linspace (a, b , n + 1)
    h = (b - a)/n
    I = h * sum(f(x)[1:])
    return I

#_________________________________________________________________Метод средних прямоугольников_________________________________________________________________

def pr_average(f, a , b):                                        # Функция, реализующая метод средних прямоугольников.
    n = 10
    x = np.linspace (a, b , n + 1)
    h = (b - a) / n
    I = h * sum(f(x + h / 2)[:-1])
    return I

#_________________________________________________________________Метод трапеций________________________________________________________________________________

def trapez(f, a , b):                                            # Функция, реализующая метод трапеций.
    n = 10
    x = np.linspace (a, b , n + 1)
    h = (b - a) / n
    I = h * ((f(x)[0] + f(x)[-1]) / 2 + sum(f(x)[1:-1]))
    print("Значение интеграла методом trapezoid библиотеки scipy:", trapezoid(f(x), x))
    return I

#_________________________________________________________________Метод Симпсона(парабол)_______________________________________________________________________

def simpson(f, a , b):                                           # Функция, реализующая метод Симпсона.
    n = 10
    x = np.zeros(n + 1)
    for i in range(n + 1):
        x[i] = a + (b - a)*i/n
    h = (b - a) / (3*n)
    I = h * (f(x)[0] + 4*sum(f(x)[1:-1:2]) + 2*sum(f(x)[2:-1:2]) + f(x)[-1])
    print("Значение интеграла методом simpson библиотеки scipy:", integrate.simpson(f(x), x=x))
    return I

#----------------------------------------------------------------------------ОДУ--------------------------------------------------------------------------------

#_______________________________________________________Метод Эйлера для для системы ОДУ k-го порядка___________________________________________________________

def Euler_sys(f, x0, xn, y0, n):                                 # Функция, реализующая метод Эйлера для для системы ОДУ k-го порядка.
    m = len(y0)                                                  # Определяем количество уравнений.
    y = np.zeros((n, m))                                         # Массив решений.
    y[0] = y0                                                    # Начальные условия.
    x = np.linspace(x0, xn, n)                                   # Разбиение отрезка.
    h = x[1] - x[0]                                              # Шаг разбиения.

    for i in range(n - 1):                                       # Реализация метода.
        y[i + 1] = y[i] + h * f(x[i], y[i])
    return x, y


#____________________________________________________Метод Рунге-Кутта 4-го порядка для системы ОДУ k-го порядка________________________________________________

def Runge_kutta_sys(f, x0, xn, y0, n):                           # Функция, реализующая метод Рунге-Кутта 4-го порядка для системы ОДУ k-го порядка.
    m = len(y0)                                                  # Определяем количество уравнений.
    y = np.zeros((n, m))                                         # Массив решений.
    y[0] = y0                                                    # Начальные условия.
    x = np.linspace(x0, xn, n)                                   # Разбиение отрезка.  
    h = x[1] - x[0]                                              # Шаг разбиения.

    for i in range(n - 1):                                       # Реализация метода.
        k1 = f(x[i], y[i])
        k2 = f(x[i] + h/2, y[i] + h/2 * k1)
        k3 = f(x[i] + h/2, y[i] + h/2 * k2)
        k4 = f(x[i] + h, y[i] + h * k3)
        K = (k1 + 2*k2 + 2*k3 + k4)/6
        y[i + 1] = y[i] + h * K
    return x, y
